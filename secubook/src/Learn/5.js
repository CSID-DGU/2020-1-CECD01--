import React, { Component } from 'react';
import Header from '../components/header.js'
import './learn.css';
import { BrowserRouter as Router, Route, Link, Switch, Redirect } from 'react-router-dom';
import axios from 'axios';
import image1 from '../assets/File_image1.png'
import image2 from '../assets/File_image2.png'

class Learn_5 extends Component {

    state = {
        check: 0
    };

    move = (e) => {
        document.location.href = "/learn_5_"
    }

    render() {

        return (
            <div>
                <Header />
                <div className="connection-wrap">
                    <div className="learn_">
                        <br></br>
                        <h1>업로드/다운로드 파일 검증</h1>
                        <br></br>

                        <b><h3>취약점 개요</h3></b>
                        <br></br>
                        업로드·다운로드 파일의 무결성, 실행권한 등에 관한 유효성 검사 방법을 설계하고, 검사 실패 시 대응방안을 설계해야 한다.
                        <br></br><br></br>
                        <b><h3>취약점 사례</h3></b><br></br>
                        <div>
                            <b>사례1 : 위험한 형식 파일 업로드</b><br></br>
                            서버 측에서 실행될 수 있는 스크립트 파일(asp, jsp, php파일 등)을 업로드 가능하고, 이 파일을 공격자가 웹을 통해 직접 실행시킬 수 있는 경우 시스템 내부명령어를 실행하거나 외부와 연결하여 시스템을 제어할 수 있게 된다.
                            <img className="learn_image_big" src={image1}></img><br></br>
                        </div>
                        <br></br>

                        <div>
                            <b>사례2 : 경로조작 문자를 이용한 파일 다운로드 취약점</b><br></br>
                            <br></br>
                            외부입력값에 대해 경로조작에 사용될 수 있는 문자를 필터링하지 않으면, 예상 밖의 접근제한 영역 에 대한 경로 문자열 구성이 가능해져 시스템 정보누출, 서비스 장애 등을 유발할 수 있는 취약점이다.<br></br>
                            <img className="learn_image_big" src={image2}></img><br></br>
                        </div>
                        <br></br>

                        <div>
                            <b>사례3 : 무결성 검사 없는 코드 다운로드</b><br></br>
                            <br></br>
                            원격으로부터 소스코드 또는 실행파일을 무결성 검사 없이 다운로드 받고, 이를 실행할 경우 호스트 서버의 변조, DNS 스푸핑 (Spoofing)또는 전송 시의 코드 변조 등의 방법을 이용하여 공격자가 악의적인 코드를 실행할 수 있게 된다.
                        </div>

                        <br></br>
                        <br></br>
                        <b><h3>설계시 고려사항</h3></b><br></br>
                        <div>
                            <b>1. 업로드되어 저장되는 파일의 타입, 크기, 개수, 실행 권한을 제한해야 한다. </b><br></br>
                            (ᄀ) 업로드 파일의 크기 제한<br></br>
                            업로드되는 파일의 크기 제한은 프레임워크에서 설정할 수도 있고, 프로그램에서 설정할 수도 있다. Spring 프레임워크를 사용하는 경우 MultipartResolver 컴포넌트의 속성값을 설정하여 업로드파일의 크기를 제한할 수 있다.
                            <br></br><br></br>
                            (ᄂ) 파일의 타입 제한. <br></br>
                            업로드되는 파일유형의 통제는 서버와 클라이언트가 동일한 정책을 적용하도록 설계해야 하며, 파일의 MIME‐TYPE과 확장자가 동시에 검사될 수 있도록 업로드파일에 대한 필터링 기능을 구현한 공통모듈을 설계하여 모든 파일 업로드기능에 적용하거나 업로드기능을 가진 컴포넌트에서 직접 필터링하도록 시큐어 코딩 규칙을 정의한다.
                            <br></br><br></br>
                            (ᄃ) 업로드되어 저장되는 파일은 실행권한 제거<br></br>
                            업로드된 파일은 반드시 실행권한을 가지지 않도록 시스템이 설정되어 있어야 한다. 업로드된 파일이 저장 되는 디렉터리에 대한 디폴트 파일 또는 디렉토리 생성 시 퍼미션을 확인하고, 업로드된 파일에 실행권한이 주어지지 않도록 시스템설정을 확인한다. 파일이 read퍼미션을 가지고 있기만 해도 서버에서 해당 파일을 읽어서 실행할 수 있으므로 서버 설정을 통해 업로드 경로의 파일이 실행되지 않도록 설정해야 한다.

                            <br></br><br></br>
                            <b>2. 업로드되어 저장되는 파일은 외부에서 식별되지 않아야 한다. </b><br></br>
                            (ᄀ) 업로드되는 파일의 저장경로는 외부에서 직접 접근이 불가능한 경로사용.<br></br>
                            파일이 저장되는 경로는 URL을 통해 직접적으로 접근가능하지 않은 디렉토리를 사용한다. 이 경우 외부 에서 URL 조작을 통해 업로드된 파일에 접근이 불가능하므로 업로드되어 저장된 파일에 대한 통제가 가능하다. 이렇게 업로드된 파일을 다운로드 하기 위해서는 다운로드 처리를 수행하는 컨트롤러를 구현해야 하며, 컨트롤러 구현 시 안전하게 파일을 다운로드 처리하기 위한 통제 기능을 적용할 수 있다.
                            <br></br><br></br>
                            (ᄂ) 업로드되어 저장되는 파일의 파일명은 랜덤하게 생성하여 사용.<br></br>
                            저장된 파일을 공격자가 찾을 수 없도록 랜덤하게 생성된 파일명을 이용하여 디렉터리에 저장한다. 이 경우 업로드한 파일명과 저장된 파일명이 매핑되어 관리될 수 있도록, DB 테이블의 컬럼을 설계할 때 업로드파일명, 저장된 파일명이 함께 저장되도록 설계한다.

                            <br></br><br></br>
                            <b>3. 파일 다운로드 요청 시, 요청파일명에 대한 검증작업을 수행해야 한다. </b><br></br>
                            (ᄀ) 파일 다운로드를 위해 요청되는 파일명에 경로를 조작하는 문자가 포함되어 있는지 점검<br></br>
                            파일명에 경로조작이 가능한 .. / \ 문자는 제거하고 사용할 수 있도록 필터링한다.
                            <br></br><br></br>
                            (ᄂ) 허가된 사용자의 허가된 안전한 파일에 대한 다운로드 요청인지 확인<br></br>
                            파일 다운로드 요청 시 허용된 사용자와 허용된 파일인지를 확인하는 기능이 구현되도록 파일 다운로드 컴포넌트가 설계되어야 하며, 파일을 다운로드하는 사용자의 안전을 위해 파일에 대한 악성코드 또는 바이러스 검사를 수행한 뒤 파일이 다운로드 되도록 기능을 설계한다.
                            <br></br><br></br>
                            (ᄃ) 사용자의 요청에 의해 서버에 존재하는 파일이 참조되는 경우 화이트리스트 정책으로 접근통제<br></br>
                            시스템에 저장되어 있는 파일을 다운로드 서비스 하는 경우, 허용 파일에 대한 목록을 작성하고 목록의 범위 안의 파일에 대해서만 제한적으로 접근 또는 다운로드 할 수 있도록 설계한다.

                            <br></br><br></br>
                            <b>4. 다운로드 받은 소스코드나 실행파일은 무결성 검사를 실행해야 한다. </b><br></br>
                            원격지에서 다운로드 받은 파일을 사용하거나 실행하는 기능을 구현해야 하는 경우 해당 파일과 해당 파일의 체크섬값(해쉬값)을 같이 다운로드 받아 파일에 대한 무결성 검사를 수행한 뒤 사용할 수 있도록 설계한다.

                        </div>
                        <br></br><br></br>

                        <b><h3>관련 구현 단계 보안약점 항목</h3></b><br></br>
                        위험한 형식 파일 업로드, 무결성 검사 없는 코드 다운로드
                        <br></br>
                        <br></br>
                        <br></br>
                        <b><h3>사고 사례</h3></b><br></br>
                        <b>무심코 연 첨부파일, 해킹에 ‘속수무책’ [디지털타임스] 2014-06-10 18:58 강은성 기자</b><br></br>
                        일반적으로 웹 게시판이나 자료실에는 사진이나 문서를 올리는 ‘파일첨부’ 기능이 포함되어 있습니다. 이 때, txt, jpg, doc와 같은 데이터 파일종류 이외에 악의적으로 제작된 스크립트 파일인 ‘웹쉘(Web‐Shell)’을 업로드 해 사이버 공격을 하는 사고가 빈번히 발생합니다.
                        <br></br>
                        웹쉘이란 공격자가 원격에서 대상 웹서버에 명령을 수행할 수 있도록 작성한 웹 스크립트(asp, jsp, php, cgi) 파일을 말합니다. zip, jpg, doc와 같은 데이터 파일종류 이외에 악의적으로 제작된 스크립트 파일인 웹쉘을 정상파일처럼 숨겨 업로드 해 웹서버를 해킹하는 것이지요. 최근에는 파일 업로드뿐만 아니라 SQL삽입(Injection)와 같은 웹 취약점을 공격 한 후 지속적으로 피해시스템을 관리할 목적으로 웹쉘을 생성해 업로드하는 고도의 해킹도 발생하고 있습니다.

                        <br></br>
                        <br></br>
                        <hr></hr>


                        <button className="problem_button" onClick={this.move}>미니문제 풀러 가기</button>
                    </div>

                </div>

            </div >
        )
    }
}

export default Learn_5;