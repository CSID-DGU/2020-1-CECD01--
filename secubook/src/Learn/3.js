import React, { Component } from 'react';
import Header from '../components/header.js'
import './learn.css';
import { BrowserRouter as Router, Route, Link, Switch, Redirect } from 'react-router-dom';
import axios from 'axios';
import image1 from '../assets/System_image1.png'
import image2 from '../assets/System_image2.png'

class Learn_3 extends Component {

    state = {
        check: 0
    };

    move = (e) => {
        document.location.href = "/learn_3_"
    }

    render() {

        return (
            <div>
                <Header />
                <div className="connection-wrap">
                    <div className="learn_">
                        <br></br>
                        <h1>시스템 자원 접근 및 명령어 수행 입력값 검증</h1>
                        <br></br>

                        <b><h3>취약점 개요</h3></b>
                        <br></br>
                        시스템 자원접근 및 명령어 수행을 위해 사용되는 입력 값에 대한 유효성 검증방법과 유효하지 않은 값에 대한 처리방법을 설계해야 한다.
                        <br></br><br></br>
                        <b><h3>취약점 사례</h3></b><br></br>
                        <div>
                            <b>사례1 : 경로조작 및 자원삽입</b><br></br>
                            공격자가 입력값 조작을 통해 시스템이 보호하는 자원에 임의로 접근하여 자원의 수정.삭제, 시스템 정보누출, 시스템 자원 간 충돌로 인한 서비스 장애 등을 유발시킬 수 있는 취약점이다. 즉, 경로 조작 및 자원 삽입을 통해서 공격자가 허용되지 않은 권한을 획득하여, 설정에 관계된 파일을 변경하거나 실행시킬 수 있다.
                            <img className="learn_image_big" src={image1}></img><br></br>

                        </div>
                        <br></br>

                        <div>
                            <b>사례2 : 입력값을 조작하여 허가되지 않은 명령 실행</b><br></br>
                            적절한 검증절차를 거치지 않은 사용자 입력값에 의해 의도하지 않은 시스템 명령어가 실행되어 부적절하게 사용자권한이 변경되거나 시스템 동작 및 운영에 악영향을 미칠 수 있는 취약점이다.
                            <br></br>
                            <img className="learn_image_big" src={image2}></img><br></br>
                            위 사진은 해당 취약점 때문에 나타날 수 있는 Stored XSS 공격을 나타낸 사진이다.<br></br>
                        악의적인 스크립트를 살펴보면 검색 인자로 작성한 스크립트를 넘겨 줌을 알 수 있다. 해당 스크립트의 내용은 본인의 웹페이지로 URL을 클릭한 사용자의 쿠키 값이 전송되도록 되어 있으며, 링크를 클릭한 사용자는 해커한테 본인의 의도와는 상관없이 자신의 쿠키 값을 전송하게 된다.
                        </div>

                        <br></br>
                        <br></br>
                        <b><h3>설계시 고려사항</h3></b><br></br>
                        <div>
                            <b>1. 외부입력값을 이용하여 시스템자원(IP, PORT번호, 프로세스, 메모리, 파일 등)을 식별하는 경우 허가되지 않은 자원이 사용되지 않도록 해야 한다.</b><br></br>
                            외부입력값이 프로그램 내부에서 사용하는 리소스를 결정하는데 직접적으로 사용되지 않도록 설계한다. 즉, 기능 설계 시 사용해야 하는 리소스 목록을 정의하여 지정된 범위 안에서 리소스를 선택하여 사용하도록 해야 하며, 리소스 목록은 프로퍼티파일이나 XML파일로 정의하여 리소스 정보를 변경하는 경우 프로그램 수정을 최소화할 수 있도록 관리한다.
                        <br></br>
                        사용자의 요청 리소스가 특정 디렉토리 내의 모든 파일인 경우, 모든 파일명을 목록화하는 것은 어렵다. 이런 경우는 입력값 중 경로조작을 일으킬 수 있는 문자(.. / ₩) 문자를 제거하고 사용 하여 지정된 경로 내의 파일만 접근가능하도록 시큐어코딩 규칙을 정의한다.
                        <br></br>
                            <br></br>
                            <b>2. 서버 프로그램 안에서 쉘을 생성하여 명령어를 실행해야 하는 경우 외부 입력값에 의해 악의적인 명령어가 실행되지 않도록 해야 한다.</b><br></br>
                            먼저, 서버프로그램 안에서 쉘을 생성해서 명령어가 실행되는 구조를 가지지 않도록 설계하는 것이 우선이다. 하지만 경우에 따라 이러한 기능이 꼭 필요한 경우에는 외부 입력값이 직접적으로 명령어의 일부로 사용되지 않도록 해야 한다.

                        <br></br>
                        명령어의 일부로 사용되어야 하는 값들을 목록화하여 목록 내에 있는 값들로만 명령어가 조립되어 실행될 수 있도록 해야 하며, 목록화되어 있는 값들이 경우에 따라 변경되어야 한다면, 이로 인해 프로그램이 수정되지 않도록 프로퍼티 파일이나 XML 파일을 사용하여 허용목록을 작성한다.
                        <br></br>
                        이 때 외부 입력값은 목록화된 정보를 검색하는 인덱스값을 사용하여 목록화된 정보의 노출을 최소화 한다.
                         <br></br><br></br>

                        </div>
                        <br></br><br></br>

                        <b><h3>관련 구현 단계 보안약점 항목</h3></b><br></br>
                        경로조작 및 자원삽입, 운영체제 명령어 삽입



                        <br></br>
                        <br></br>
                        <br></br>
                        <b><h3>사고 사례</h3></b><br></br>
                        <b>[단독] 충격! OO 사이트 보안 취약성 확인....국민 정보가 "줄줄“ [보안뉴스] 2011-05-01 20:52 오병민 기자 </b><br></br>
                        주소창에 주민번호 입력으로 주소 및 주요 정보 노출 가능 <br></br>
                        철통같이 지켜져야 할 OO 사이트에서 기본적인 보안문제가 방치돼 특히 별다른 해킹 프로그램 없이 인터넷 주소창에 주민번호와 특정 구문을 입력하는 것만으로도 개인의 민감한 정보가 노출되는 것으로 나타나 충격을 주고 있다. <br></br>
                        이 사이트는 개발단계부터 체계적으로 보안을 적용하지 않아 로그인을 거치지 않아도 주요 정보를 열람할 수 있는 심각한 취약점을 가지고 있는 것으로 보안뉴스에서 처음 확인됐다. <br></br>
                        <br></br>
                        <br></br>
                        <hr></hr>


                        <button className="problem_button" onClick={this.move}>미니문제 풀러 가기</button>
                    </div>

                </div>

            </div >
        )
    }
}

export default Learn_3;